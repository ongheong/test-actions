name: DEV CI/CD

on:
  push:
    branches:
      - develop
    tags:
      - 'development-**'

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      # Step 1: 소스코드 복사
      - name: Checkout source code
        uses: actions/checkout@v4

      # Step 2: node_modules 캐싱
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      # Step 3: 의존성 패키지 설치
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install

      # Step 4: 코드 품질 검사
      - name: Check Lint
        run: yarn lint

      # Step 5: 단위 테스트 실행
      # - name: Run Unit Test
      #   run: yarn test

      # Step 6: 빌드
      - name: Build
        run: yarn build

      # Step 7: 빌드 결과물을 Artifact로 업로드
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: ./build

  deploy:
    runs-on: ubuntu-latest
    needs: ci # ci job이 성공한 이후에 배포 작업 실행
    steps:
      # Step 1: AWS 인증
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 2: CI에서 업로드한 build artifact 다운로드
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build

      # Step 3: AWS S3에 빌드 결과물 배포
      - name: Deploy to S3
        run: aws s3 sync ./build s3://${{ secrets.AWS_BUCKET_NAME }} --delete

      # Step 4: CloudFront 캐시 무효화
      - name: Invalidate CloudFront Cache
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_DISTRIBUTION_ID }} --paths "/*"